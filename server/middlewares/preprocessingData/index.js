const pool = require('../../model/connectionPool');

/* ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ Í¥ëÍ≥† ÎÇ¥Ïó≠ Í¥ÄÎ†® Ìï®Ïàò Î∞è ÎùºÏö∞ÌÑ∞ */
// ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ Í¥ëÍ≥†ÎÇ¥Ïó≠ Ï†ÑÏ≤òÎ¶¨ Ìï®Ïàò
function preprocessingBannerData(result) {
  if (result) {
    // column preprocessing
    let columns = result[0];
    columns = Object.keys(columns);
    columns = columns.map((col) => {
      col = col.replace('bannerSrc', 'Î∞∞ÎÑà')
        .replace('marketerName', 'Í¥ëÍ≥†Ï£º')
        .replace('contractionTime', 'Í≥ÑÏïΩÏùº')
        .replace('contractionState', 'ÌòÑÏû¨ ÏÉÅÌÉú');
      return col;
    });
    columns.splice(-1, 1);

    const contractionIds = [];
    // dataset preprocessing
    result = result.map(
      (value) => {
        value.contractionState === 0 ? value.contractionState = 'Ï†ïÏÇ∞ÎåÄÍ∏∞‚åõÔ∏è' : value.contractionState = 'ÏôÑÎ£åÎê®üëå';
        value.contractionTime = value.contractionTime.toLocaleString();
        contractionIds.push(value.contractionId);
        delete value.contractionId;

        value = Object.values(value);
        return value;
      }
    );
    return { columns, data: result, contractionIds };
  }
}

// ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ Í¥ëÍ≥† Ï∂úÍ∏à ÎÇ¥Ïó≠ Ï†ÑÏ≤òÎ¶¨ Ìï®Ïàò
function withdrawalList(result) {
  const rows = result;
  const columns = Object.keys(rows[0]).map(col => col.replace('date', 'Ï∂úÍ∏àÎÇ†Ïßú')
    .replace('creatorWithdrawalAmount', 'Ï∂úÍ∏àÍ∏àÏï°')
    .replace('withdrawalState', 'Ïã†Ï≤≠ÏÉÅÌÉú'));

  // dataset preprocessing
  const data = rows.map(
    (value) => {
      const obj = [];
      obj.push(value.date.toLocaleString());
      obj.push(value.creatorWithdrawalAmount.toLocaleString());
      obj.push(value.withdrawalState === 0 ? 'Ï†ïÏÇ∞ÎåÄÍ∏∞‚è∞' : 'ÏôÑÎ£åÎê®üëå');
      return obj;
    }
  );
  return { columns, data };
}

// ÎßàÏºÄÌÑ∞ ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Í¥ëÍ≥† Îê† ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ Î™©Î°ùÏóê Îì§Ïñ¥Í∞ÄÎäî Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤òÎ¶¨ Ìï®Ïàò
function creatorList(result) {
  const data = result.forEach((row) => {
    row.streamPlatform = 'Twitch.tv';
    row.freqStreamCategory = 'Gaming';
    row.viewer = Math.ceil(row.avgViewer);
    row.cost = `${Math.ceil(row.viewer * 6)}Ïõê`;
    delete row.avgViewer;
    return Object.values(row);
  });

  return data;
}

module.exports = {
  preprocessingBannerData,
  withdrawalList,
  creatorList
};
